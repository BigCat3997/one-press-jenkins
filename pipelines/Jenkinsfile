pipeline {
    agent { label 'debian-docker-agent1' }

    parameters {
        string(name: 'git_branch', defaultValue: 'main', description: 'Branch to clone')
    }

    environment {
        PYTHON_SCRIPT = '--version'
        ONE_PRESS_FUNCTIONS_REPO_URL = 'https://github.com/BigCat3997/one-press-functions'
        ONE_PRESS_RESOURCES_REPO_URL = 'https://github.com/BigCat3997/one-press-resources'
        MAVEN_SIMPLE_API_REPO_URL = 'https://github.com/BigCat3997/maven-simple-api'
        CONDA_BIN_PATH = '/opt/miniconda3/bin'
        PATH = "${CONDA_BIN_PATH}:${env.PATH}"
        FUNCTIONS_WORK_DIR = "${WORKSPACE}/one-press-functions"
        PYTHONPATH = "${FUNCTIONS_WORK_DIR}:${PYTHONPATH}"
    }

    stages {
        stage('Bootstrap') {
            environment {
                PYTHON_SCRIPT = '--version'
                ONE_PRESS_FUNCTIONS_REPO_URL = 'https://github.com/BigCat3997/one-press-functions'
                ONE_PRESS_RESOURCES_REPO_URL = 'https://github.com/BigCat3997/one-press-resources'
                MAVEN_SIMPLE_API_REPO_URL = 'https://github.com/BigCat3997/maven-simple-api'
                SET_UP_STAGE_ADO_COMMAND = "${FUNCTIONS_WORK_DIR}/app/main.py SET_UP_STAGE_ADO"
            }
            steps {
                script {
                    dir('one-press-functions') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            userRemoteConfigs: [[url: env.ONE_PRESS_FUNCTIONS_REPO_URL]]
                        ])
                    }
                    dir('one-press-resources') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            userRemoteConfigs: [[url: env.ONE_PRESS_RESOURCES_REPO_URL]]
                        ])
                    }
                    dir('maven-simple-api') {
                        checkout([
                            $class: 'GitSCM',
                            branches: [[name: '*/main']],
                            userRemoteConfigs: [[url: env.MAVEN_SIMPLE_API_REPO_URL]]
                        ])
                    }
                }

                // sh '''#!/bin/bash
                //     env
                // '''

                withEnv(
                    [
                        "BOOTSTRAP_PREFIX_PATH=${env.WORKSPACE}",
                        "STAGE_NAME=BOOTSTRAP"
                    ]
                ) {
                    sh '''#!/bin/bash
                        source activate one-press-functions
                        python $SET_UP_STAGE_ADO_COMMAND
                        cat $WORKSPACE/bootstrap_section/env_vars.sh
                    '''
                }

                    sh """#!/bin/bash
                        echo "NEW_ENV=ABC" > ${env.WORKSPACE}/bootstrap_section/env_vars.sh
                        cat ${env.WORKSPACE}/bootstrap_section/env_vars.sh
                    """

                script {
                    // def envVars = readFile("${env.WORKSPACE}/bootstrap_section/env_vars.sh").split('\n')
                    // def newEnvVars = []
                    // envVars.each { envVar ->
                    //     if (envVar) {
                    //         def (key, value) = envVar.split('=')
                    //         newEnvVars.add("${key}=${value.replaceAll('"', '')}")
                    //     }
                    // }
                    def envVars = setGlobalEnvVars("${env.WORKSPACE}/bootstrap_section/env_vars.sh")
                    withEnv(newEnvVars) {
                        sh '''#!/bin/bash
                            ls -lash .
                            env
                        '''
                    }
                }

                // withEnv() {
                //         sh '''#!/bin/bash
                //             ls -lash .
                //             env
                //         '''
                // }

                // sh """#!/bin/bash
                //     ls -lash .
                //     env
                //     echo ${env.bootstrap_section_path}
                // """
            }
        }

        stage('Build') {
            steps {
                sh '''#!/bin/bash
                        source activate one-press-functions
                        python $SET_UP_STAGE_ADO_COMMAND
                    '''
            }
        }
    }

    // post {
    //     always {
    //         echo 'Pipeline finished.'
    //         archiveArtifacts artifacts: 'a.txt', fingerprint: true
    //     }
    // }
}


def setGlobalEnvVars(filePath) {
    def envVars = readFile(filePath).split('\n')
    def newEnvVars = []
    envVars.each { envVar ->
        if (envVar) {
            def (key, value) = envVar.split('=')
            newEnvVars.add("${key}=${value.replaceAll('"', '')}")
        }
    }
    return envVars
    // withEnv(newEnvVars) {
    //     sh '''#!/bin/bash
    //         ls -lash .
    //         env
    //     '''
    // }
}